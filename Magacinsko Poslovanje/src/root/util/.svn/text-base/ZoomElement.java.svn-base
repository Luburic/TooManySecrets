package root.util;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Vector;

import javax.swing.FocusManager;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTextField;

import net.miginfocom.swing.MigLayout;

import com.toedter.calendar.JDateChooser;

import dbConnection.DBConnection;
import dialogs.StandardForm;

@SuppressWarnings("serial")
public class ZoomElement extends JPanel{

	public static final int NUMERIC = 1;
	public static final int DATE = 3;
	public static final int VARCHAR = 4;
	private LinkedHashMap<String, JComponent> shortField;
	private LookupElement longField;
	private LinkedHashMap<String,JButton> zoomButton;
	private LinkedHashMap<String, String> shortFieldType;
	private LinkedHashMap<String, ColumnMetaData> shortFieldCMD;
	private String type;
	private Collection<ColumnMetaData> columnRepresent;
	private String lookupDisplayName;
	private LinkedHashMap<String, Collection<String>> buttonFieldRelation;
	private int size;
	private ReferencesMetaData connection;
	//TODO add zoom button leave to validation
	public ZoomElement(ReferencesMetaData rmd) {
		super();
		
		connection = rmd;
		shortField = new LinkedHashMap<String,JComponent>();
		zoomButton = new LinkedHashMap<String, JButton>();
		shortFieldType = new LinkedHashMap<String, String>();
		buttonFieldRelation = new LinkedHashMap<String, Collection<String>>();
		shortFieldCMD = new LinkedHashMap<String, ColumnMetaData>();
		
		columnRepresent = rmd.getZoomableColumns();
		size = rmd.getColumns().size();
		
		//fill bFR
		for (ColumnMetaData cmd : rmd.getColumns()) {
			if (!buttonFieldRelation.containsKey(rmd.getParentTable())) {
				Vector<String> first = new Vector<String>();
				first.add(cmd.getName());
				buttonFieldRelation.put(rmd.getParentTable(), first);
			} else {
				((Collection<String>)buttonFieldRelation.get(rmd.getParentTable())).add(cmd.getName());
			}
		}
		
		for (final ColumnMetaData cmd : rmd.getColumns()) {
			JComponent element = null;
			final JButton button = new JButton("...");
			
			int width = Math.min(cmd.getLength(), 16);//TODO check min value
			if (cmd.getType().equals(Constants.DB_DATE)) {
				element = new JDateChooser("dd/MM/yyyy", "##/##/####", '_');
			} else if (cmd.getType().equals(Constants.DB_DECIMAL_BIG)) {
				element = new NumericField(width);
			} else if (cmd.getType().equals(Constants.DB_INTEGER_BIG)) {
				element = new NumericField(width);
			} else if (cmd.getType().equals(Constants.DB_VARCHAR)) {
				element = new VarcharField(width);
			} else {
				// not recognized
			}
			
			if (cmd.autoGenerated==true || cmd.readOnly==true) {
				element.setEnabled(false);
			}
			element.setName(cmd.getName());
			final ReferencesMetaData finRmd = rmd;
			
			button.setName(rmd.getParentTable());
			button.setFocusable(true);
			button.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

				//	final StandardForm dd = new StandardForm(cmd.getForigen_table_name(), cmd.getTableDbName());
				    Vector<Column> keys = new Vector<Column>();
				    
				    for(ColumnMetaData cmd : connection.getColumns()){
				        Column c = new Column(cmd);
				        if (shortField.get(c.getName()) instanceof JDateChooser) {
				            if( ((JDateChooser)shortField.get(c.getName())).getDate() != null){
//    				        	DateFormat formatter = new SimpleDateFormat("yyyy/MM/dd");
				            	DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
    				        	c.setValue(formatter.format(((JDateChooser)shortField.get(c.getName())).getDate()));
				            }else{
				                c.setValue("");
				            }
				        } else {
				        	if (shortField.get(c.getName()) instanceof VarcharField) {
				        		c.setValue(((VarcharField)shortField.get(c.getName())).getText());
				        	} else {
				        		c.setValue(((JTextField)shortField.get(c.getName())).getText());
				        	}
				        }
				        keys.add(c);
				    }
					final StandardForm dd = new StandardForm(finRmd.getParentTable(), true, connection, keys);
					Constants.stepIntoZoom();
		            dd.addZoomValueListener(new ZoomValueListener(){

						@Override
						public void zoomValueSet(ZoomValueEvent event) {
//							if (buttonFieldRelation.get(cmd.getForigen_table_name()).size() > 1) {
//								ZoomElement.this.setData(event.getData(), buttonFieldRelation.get(cmd.getForigen_table_name()));
//							} else {
//								ZoomElement.this.setData(event.getData(cmd.getName()), cmd.getName());
//							}
							ZoomElement.this.setData(event.getDataKeys(), event.getDataValues());
							ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(""));
							dd.dispose();
						}
		            	
		            });
		            dd.setVisible(true);
				}
				
			});
			
			button.addFocusListener(new FocusListener() {

				@Override
				public void focusGained(FocusEvent arg0) {
					ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(""));
					
				}

				@Override
				public void focusLost(FocusEvent arg0) {
					Boolean here = false;
					for (JComponent jc : shortField.values()) {
						if (jc.equals(arg0.getOppositeComponent())) {
							here = true;
							break;
						}
					}

					//TODO mandatory zoom check
					if (!here && connection.getMandatory()) {
						if (lookup(true)) {
							ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(""));
						} else {
							ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(Constants.VALIDATION_MANDATORY_FIELD));
							if (ZoomElement.this.longField != null) {
								ZoomElement.this.longField.clearText();
							}
						}
					}
				}
				
			});
			
			element.addFocusListener(new FocusListener() {

				@Override
				public void focusGained(FocusEvent arg0) {
					ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(""));
				}

				@Override
				public void focusLost(FocusEvent arg0) {
					boolean empty = false;
					 if ( (arg0.getSource()) instanceof JTextField) {
						 if ( ((JTextField)arg0.getSource()).getText().trim().length() == 0) {
							 empty = true;
							 if (ZoomElement.this.longField != null) {
								 ZoomElement.this.longField.clearText();
							 }
						 }
							 
					 } else if ( (arg0.getSource()) instanceof VarcharField) {
						 if ( ((VarcharField)arg0.getSource()).getText().trim().length() == 0) {
							 empty = true;
							 if (ZoomElement.this.longField != null) {
								 ZoomElement.this.longField.clearText();
							 }
						 }
					 } else if ( (arg0.getSource()) instanceof JComboBox) {
						 if ( ((JComboBox)arg0.getSource()).getSelectedIndex() == -1) {
							 empty = true;
							 if (ZoomElement.this.longField != null) {
								 ZoomElement.this.longField.clearText();
							 }
						 }
					 } else if ( (arg0.getSource()) instanceof JDateChooser) {
						 if ( ((JDateChooser)arg0.getSource()).getDate() == null) {
							 empty = true;
							 if (ZoomElement.this.longField != null) {
								 ZoomElement.this.longField.clearText();
							 }
						 }
					 }
						
					
					//do not validate if next is zoom button
					if (arg0.getOppositeComponent() != null) {
						if ( (JComponent)arg0.getOppositeComponent() instanceof JButton) {
							if ( ((JButton)arg0.getOppositeComponent()).equals(button)) {
								if (lookup()) {
									FocusManager fm = FocusManager.getCurrentManager();
									fm.focusNextComponent();
								}
								return;
							}
						}
					}
					if (Constants.MODE != Constants.MODE_SEARCH) {  
						if ( (arg0.getSource()) instanceof JTextField) {
							if (((JTextField)arg0.getSource()).getText().trim().length() > 0) {
								if (validateEntry(cmd.getName())) {
									if (lookup(true)) {
										ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(""));
									} else {
										ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(Constants.VALIDATION_ZOOM_FIELD));
										 if (ZoomElement.this.longField != null) {
											 ZoomElement.this.longField.clearText();
										 }
									}
								} else {
									ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(Constants.VALIDATION_ZOOM_FIELD));
									 if (ZoomElement.this.longField != null) {
										 ZoomElement.this.longField.clearText();
									 }
								}	
							} else {
								if (ZoomElement.this.longField != null) {
									ZoomElement.this.longField.clearText();
								}
							}
						} else if ( (arg0.getSource()) instanceof VarcharField ) {
							if (((VarcharField)arg0.getSource()).getText().trim().length() > 0) {
								if (validateEntry(cmd.getName())) {
									if (lookup(true)) {
										ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(""));
									} else {
										ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(Constants.VALIDATION_ZOOM_FIELD));
										 if (ZoomElement.this.longField != null) {
											 ZoomElement.this.longField.clearText();
										 }
									}
								} else {
									ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(Constants.VALIDATION_ZOOM_FIELD));
									 if (ZoomElement.this.longField != null) {
										 ZoomElement.this.longField.clearText();
									 }
								}
							} else {
								if (ZoomElement.this.longField != null) {
									ZoomElement.this.longField.clearText();
								}
							}
						}else if (arg0.getSource() instanceof JDateChooser) {
							//validate date
						}

						//check if all fields are left
						if (empty) {
							Boolean here = false;
							for (JComponent jc : shortField.values()) {
								if (jc.equals(arg0.getOppositeComponent())) {
									here = true;
									break;
								}
							}

							//TODO mandatory zoom check
							if (!here && connection.getMandatory()) {
								ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(Constants.VALIDATION_MANDATORY_FIELD));
								if (ZoomElement.this.longField != null) {
									ZoomElement.this.longField.clearText();
								}
							}
						}

					} else {
						//search mode
						//TODO clear fix
						ZoomElement.this.fireZoomValidation(new ZoomValidationEvent(""));
					}
				}
				
			});
			
			shortField.put(cmd.getName(), element);
			shortFieldType.put(cmd.getName(), cmd.getType());
			shortFieldCMD.put(cmd.getName(), cmd);
			zoomButton.put(rmd.getParentTable(), button);
			
		}
		
		if (rmd.getAllVisibleColumnFromParentTable() == null) {
			longField = null;
		} else {
			longField = new LookupElement(10);
		}
		String pom = "wrap "+(shortField.size()+2);//TODO calculate wrap width
		MigLayout mg = new MigLayout(pom);
		this.setLayout(mg);
		Iterator<JComponent> shortIterator = shortField.values().iterator();
		Iterator<JButton> buttonIterator = zoomButton.values().iterator();
		while (shortIterator.hasNext()) {
			this.add(shortIterator.next());
//			if (buttonIterator.hasNext())
//			this.add(buttonIterator.next());
		}
		this.add(buttonIterator.next());
		if (longField != null)
			this.add(longField);
	}

	public JComponent getElement() {
		return shortField.values().iterator().next();
	}
	
	public JComponent getElemenet(int index) {
		return shortField.get(index);
	}
	
	public JComponent getElement(String dbName) {
		return shortField.get(dbName);
	}
	
	public JButton getButton() {
		return zoomButton.values().iterator().next();
	}
	
	public JButton getButton(String key) {
		return zoomButton.get(key);
	}
	
	public HashMap<String, JButton> getButtonsMap(){
		return zoomButton;
	}
	
//	public void setData(Object data) {
//		
//		this.setData(data, shortField.keySet().iterator().next());
//	}
	
	public void setData(ArrayList<String> dataKeys, ArrayList<Object> dataValues) {
		int i = 0;
		for (String key : dataKeys) {
			Object currentData = dataValues.get(i);
			String realKey = connection.getNameInSource(key);
			if (currentData instanceof Date) {
				((JDateChooser)shortField.get(realKey)).setDate((Date)dataValues.get(i));
			} else {
				if (shortField.get(realKey) instanceof VarcharField) {
					((VarcharField)shortField.get(realKey)).setText(dataValues.get(i).toString());
				} else {
					((JTextField)shortField.get(realKey)).setText(dataValues.get(i).toString());
				}
			}
			i++;
		}

		lookup();
			
	}
	
	private boolean allShortFieldsHaveValue() {
		boolean result = true;
		for (JComponent field : shortField.values()) {
			if (field instanceof NumericField) {
				if (((JTextField)field).getText().trim().length() == 0) {
					result = false;
					break;
				}
			} else if (field instanceof VarcharField) {
				if (((VarcharField)field).getText().trim().length() == 0) {
					result = false;
					break;
				}
			} else if (field instanceof JComboBox) {
				if (((JComboBox)field).getSelectedItem().toString().trim().length() == 0) {
					result = false;
					break;
				}
			} else if (field instanceof JDateChooser) {
				if (((JDateChooser)field).getDate() == null	) {
					result = false;
					break;
				}
			}
		}
		
		return result;
	}
	
	public boolean validateEntry() {
		if (Constants.MODE == Constants.MODE_SEARCH) {
			return true;
		}
		return lookup(true);
	}
	
	public boolean validateEntry(String name) {
		if (Constants.MODE == Constants.MODE_SEARCH) {
			return true;
		}
		if (!allShortFieldsHaveValue()) {
			//fetch for current field
			ColumnMetaData cmd = shortFieldCMD.get(name);
//			cmd.getParentColumn().getTableDbName()); | getForigen_table_name
			TableMetaData tableMetaData = MetaDataLoader.getInstace().getTable(cmd.getForigen_table_name());
			String selectPart = "SELECT *";
			String fromPart = "FROM "+tableMetaData.getDbName();
			String wherePart = " WHERE "+cmd.getForigen_column_name() + " = ?";//+getData(cmd.getName()).toString();
			
			String selectForFK = selectPart + fromPart + wherePart;
			try {
				PreparedStatement stmt = DBConnection.getConnection().prepareStatement(selectForFK);

				stmt.setObject(1, getData(cmd.getName()));
				
				ResultSet rset = stmt.executeQuery();

				//TODO
				int rowCounter = 0;
				while (rset.next()) {
					rowCounter++;
				}
				if (rowCounter == 1) {
					return true;
				} else {
					return false;
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} else {
			//fetch for all
			return lookup(true);


			
		}
		
		return false;
	}
	
	private boolean lookup() {
		return lookup(false);
	}
	
	private boolean lookup(boolean force) {
		if (longField != null || force) {

			if (allShortFieldsHaveValue()) {
				TableMetaData tableMetaData = MetaDataLoader.getInstace().getTable(columnRepresent.iterator().next().getTableDbName());
				Collection<ReferencesMetaData> referencedMetaData = tableMetaData.getEntities();
				String selectPart = "SELECT ";
				String fromPart = " FROM " + columnRepresent.iterator().next().getForigen_table_name();
				String wherePart = " WHERE ";
				for (ColumnMetaData currentData : columnRepresent) {
					if (wherePart.length() > 7) {
						wherePart += " AND ";
					}
					wherePart += currentData.getForigen_column_name() + " = ?";

				}
				if (force) {
					selectPart +="*";
				} else {
					for(ReferencesMetaData rmd : referencedMetaData){
						if(columnRepresent.iterator().next().getForigen_table_name().equals(rmd.getParentTable())){
							ColumnMetaData columnMetaData = rmd.getAllVisibleColumnFromParentTable();			

							selectPart += columnMetaData.getCodeName();
							lookupDisplayName = columnMetaData.getName();

							break;
						}
					}
				}
				String selectForFK = selectPart + fromPart + wherePart;
				try {
					PreparedStatement stmt = DBConnection.getConnection().prepareStatement(selectForFK);

					int i = 1;
					for(ColumnMetaData cmd : columnRepresent){
						stmt.setObject(i++, getData(cmd.getName()));
					}

					ResultSet rset = stmt.executeQuery();

					
					if (force) {
//						if (/)
						int rowCounter = 0;
						while (rset.next()) {
							rowCounter++;
						}
						if (rowCounter == 1) {
							return true;
						} else {
							return false;
						}
					} else {
						while (rset.next()) {
							longField.setText(rset.getString(1));//pod pretpostavkom da ce se uvek za opis koristiti string
							return true;
						}

					}
				} catch (SQLException e) {
					if (force) 
						return false;
					
					e.printStackTrace();
				}	
			}
		}
		return false;
	}
	
	//TODO refactor 123
	public void setData(Object data, String index) {
		if (data != null && data.getClass().getName().equals(Constants.DB_DATE)) {			
			((JDateChooser)shortField.get(index)).setDate((java.util.Date)data);
		} else {
			if (shortField.get(index) instanceof VarcharField) {
				((VarcharField)shortField.get(index)).setText((String)data);
			} else {
				((JTextField)shortField.get(index)).setText((String)data);
			}
		}

		if (longField != null) {

			boolean doLookup = true;
			for (JComponent field : shortField.values()) {
				if (field instanceof NumericField) {
					if (((JTextField)field).getText().trim().length() == 0) {
						doLookup = false;
						break;
					}
				} else if (field instanceof VarcharField  ) {
					if (((VarcharField)field).getText().trim().length() == 0) {
						doLookup = false;
						break;
					}
				} else if (field instanceof JComboBox) {
					if (((JComboBox)field).getSelectedItem().toString().trim().length() == 0) {
						doLookup = false;
						break;
					}
				} else if (field instanceof JDateChooser) {
					if (((JDateChooser)field).getDate() == null	) {
						doLookup = false;
						break;
					}
				}

			}

			if (doLookup) {
				TableMetaData tableMetaData = MetaDataLoader.getInstace().getTable(columnRepresent.iterator().next().getTableDbName());
				Collection<ReferencesMetaData> referencedMetaData = tableMetaData.getEntities();
				String selectPart = "SELECT ";
				String fromPart = " FROM " + columnRepresent.iterator().next().getForigen_table_name();
				String wherePart = " WHERE ";
				for (ColumnMetaData currentData : columnRepresent) {
					if (wherePart.length() > 7) {
						wherePart += " AND ";
					}
					wherePart += currentData.getForigen_column_name() + " = ?";

				}
				for(ReferencesMetaData rmd : referencedMetaData){
					if(columnRepresent.iterator().next().getForigen_table_name().equals(rmd.getParentTable())){
						ColumnMetaData columnMetaData = rmd.getAllVisibleColumnFromParentTable();			

						selectPart += columnMetaData.getCodeName();
						lookupDisplayName = columnMetaData.getName();

						break;
					}
				}
				String selectForFK = selectPart + fromPart + wherePart;
				try {
					PreparedStatement stmt = DBConnection.getConnection().prepareStatement(selectForFK);
					
					int i = 1;
					for(ColumnMetaData cmd : columnRepresent){
						stmt.setObject(i++, getData(cmd.getName()));
					}

					ResultSet rset = stmt.executeQuery();

					//TODO
					while (rset.next()) {
						longField.setText(rset.getString(1));//pod pretpostavkom da ce se uvek za opis koristiti string
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}	
			}
		}
	}
	
//	public void setData(HashMap<String,Object> data, Collection<String> index) {
//		for (String ii : index) {
//			if (data.getClass().equals(Constants.DB_DATE)) {			
//				((JDateChooser)shortField.get(ii)).setDate((java.util.Date)data.get(ii));
//			} else {
//				if (data.get(ii) instanceof String)
//					((JTextField)shortField.get(ii)).setText((String)data.get(ii));
//				else
//					((JTextField)shortField.get(ii)).setText(data.get(ii).toString());
//			}
//		}
//
//		if (longField != null) {
//
//			boolean doLookup = true;
//			for (JComponent field : shortField.values()) {
//				if (field instanceof JTextField || field instanceof NumericField) {
//					if (((JTextField)field).getText().trim().length() == 0) {
//						doLookup = false;
//						break;
//					}
//				} else if (field instanceof JComboBox) {
//					if (((JComboBox)field).getSelectedItem().toString().trim().length() == 0) {
//						doLookup = false;
//						break;
//					}
//				} else if (field instanceof JDateChooser) {
//					if (((JDateChooser)field).getDate() == null	) {
//						doLookup = false;
//						break;
//					}
//				}
//
//			}
//
//			if (doLookup) {
//				TableMetaData tableMetaData = MetaDataLoader.getInstace().getTable(columnRepresent.iterator().next().getTableDbName());
//				Collection<ReferencesMetaData> referencedMetaData = tableMetaData.getEntities();
//				String selectPart = "SELECT ";
//				String fromPart = " FROM " + columnRepresent.iterator().next().getForigen_table_name();
//				String wherePart = " WHERE ";
//				for (ColumnMetaData currentData : columnRepresent) {
//					if (wherePart.length() > 7) {
//						wherePart += " AND ";
//					}
//					wherePart += currentData.getForigen_column_name() + " = ?";
//
//				}
//				for(ReferencesMetaData rmd : referencedMetaData){
//					if(columnRepresent.iterator().next().getForigen_table_name().equals(rmd.getParentTable())){
//						ColumnMetaData columnMetaData = rmd.getAllVisibleColumnFromParentTable();			
//
//						selectPart += columnMetaData.getCodeName();
//						lookupDisplayName = columnMetaData.getName();
//
//						break;
//					}
//				}
//				String selectForFK = selectPart + fromPart + wherePart;
//				try {
//					PreparedStatement stmt = DBConnection.getConnection().prepareStatement(selectForFK);
//					
//					int i = 1;
//					for(ColumnMetaData cmd : columnRepresent){
//						stmt.setObject(i++, getData(cmd.getName()));
//					}
//
//					ResultSet rset = stmt.executeQuery();
//
//					//TODO
//					while (rset.next()) {
//						longField.setText(rset.getString(1));//pod pretpostavkom da ce se uvek za opis koristiti string
//					}
//				} catch (SQLException e) {
//					e.printStackTrace();
//				}	
//			}
//		}
//	}
	
	/**
	 * Data stored into foregin key placeholder. If foregin key is 
	 * a type of Date then return value is Date. In any other case 
	 * it is a string stored into JTextField or IntegerField.
	 * 
	 * @return Data stored into foregin key placeholder.
	 */
	public Object getData(String dbName) {
		  Object result;
		//  if (type == Constants.DB_DATE) {shortField.get(dbName)
		  if (shortField.get(dbName) instanceof JDateChooser) {
		   java.util.Date date = ((JDateChooser)shortField.get(dbName)).getDate();
		   if(date == null)
			   return null;
		   java.sql.Date sqlDate = new java.sql.Date(date.getTime());
		   result = sqlDate;
		  } else  {
		   if (shortField.get(dbName) instanceof JComboBox) {
		    result = ((JComboBox)shortField.get(dbName)).getSelectedItem().toString();
		   } else if (shortField.get(dbName) instanceof VarcharField) {
			   result = ((VarcharField)shortField.get(dbName)).getText();
		   } else {
			   result = ((JTextField)shortField.get(dbName)).getText();
		   }
		  }
		  return result;
	}
	
	public Collection<JComponent> getShortFields() {
		return this.shortField.values();
	}
	
	public HashMap<String, JComponent> getShortFieldsMap(){
		return this.shortField;
	}
	
	public JTextField getLongFields() {
		return this.longField;
	}
	
	public Object getData() {
		Object result;
		if (type == Constants.DB_DATE) {
			java.util.Date date = ((JDateChooser)shortField.values().iterator().next()).getDate();
			java.sql.Date sqlDate = new java.sql.Date(date.getTime());
			result = sqlDate;
		} else  {
			if (shortField.getClass().getName().equals(Constants.J_COMBO_BOX)) {
				result = ((JComboBox)shortField.values().iterator().next()).getSelectedItem().toString();
			} else  if (shortField.values().iterator().next() instanceof VarcharField)	{
				result = ((VarcharField)shortField.values().iterator().next()).getText();
			} else {
				result = ((JTextField)shortField.values().iterator().next()).getText();
			}
		}
		return result;
	}
	
	public String getForeginKeyType() {
		return this.type;
	}
	
	public String getLookupValue() {
		return longField.getText();
	}
	
	public boolean hasLookup() {
		return 	(longField != null);	
	}
	
//	public String getLookupValue(String dbName) {
//		return longField.get(dbName).getText();
//	}
	
//	public Collection<String> getLookupValues() {
//		Collection<String> res = new ArrayList<String>();
//		for (JTextField current : longField.values())
//			res.add(current.getText());
//		return res;
//	}
	
	public String getLookupDisplayName(){
		return lookupDisplayName;
	}
	
	public Boolean isComposite() {
		if (this.size > 1) {
			return true;
		}
		return false;
	}
	
	public int getNumber() {
		return this.size;
	}
	
	public String getType(String displayName) {
		return shortFieldType.get(displayName);
	}
	
	public void addZoomValidationListener(ZoomValidationListener zoomValidationListener) {
		listenerList.add(ZoomValidationListener.class, zoomValidationListener);
	}
	
	public void removeZoomValidationListener(ZoomValidationListener listener) {
		listenerList.remove(ZoomValidationListener.class, listener);
	}
	
	void fireZoomValidation(ZoomValidationEvent event) {
		Object[] listeners = listenerList.getListenerList();
		for (int i=0; i<listeners.length; i++) {
			if (listeners[i] == ZoomValidationListener.class) {
				((ZoomValidationListener)listeners[i+1]).zoomValidationSet(event);
			}
		}
	}
	
	@Override
	public void setEnabled(boolean enabled) {
		for (JComponent jc : shortField.values()) {
			jc.setEnabled(enabled);
		}
		zoomButton.values().iterator().next().setEnabled(enabled);
		
		//super.setEnabled(enabled);
	}
	
	
}
