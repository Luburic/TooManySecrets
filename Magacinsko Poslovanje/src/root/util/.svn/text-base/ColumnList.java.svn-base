package root.util;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

/**
 * This class is made to represent one row in table.
 *
 */
public class ColumnList {

  /**
   * All columns in row.
   */
  private List<Column> columns;
  
  /**
   * Default constructor.
   */
  public ColumnList() {
    columns = new ArrayList<Column>();
  }
  
  /**
   * Constructor.
   */
  public ColumnList(List<Column> columns) {
    this();
    this.columns.addAll(columns);
  }
  
  /**
   * Method for getting column from list. 
   * @param name of column
   * @return column that has name name, or return null if there
   * is no column with that name.
   */
  public Column getColumn(String name) {
    Iterator<Column> it = columns.iterator();
    while (it.hasNext()) {
      Column c = it.next();
      if (c.getName().equals(name))
        return c;
    }
    return null;
  }
  
  /**
   * Method for getting value of specific column.
   * @param name of column
   * @return value of column that has name name.
   */
  public Object getValue(String name) {
    Column c = getColumn(name);
    if (c == null)
      return null;
    else
      return c.getValue();
  }
  
  /**
   * Method for making where clause in sql query for data in list.
   * @return where clause for sql query.
   */
  public String getWhereClause() {
    StringBuffer retVal = new StringBuffer();
    Iterator<Column> it = columns.iterator();
    while (it.hasNext()) {
      Column c = it.next();
      if (retVal.length() > 0)
        retVal.append(" AND");
      retVal.append(' ');
      retVal.append(c.getName());
      retVal.append('=');
      if (c.getValue() instanceof Number) {
        retVal.append(c.getValue().toString());
      } else if (c.getValue() instanceof String) {
        retVal.append("'");
        retVal.append(c.getValue());
        retVal.append("'");
      } else if (c.getValue() instanceof Date) {
        retVal.append("'");
        retVal.append(sdf.format((Date)c.getValue()));
        retVal.append("'");
      } else if (c.getValue() instanceof BigDecimal) {
        retVal.append(c.getValue());
      }
    }
    return retVal.toString();
  }
  
  /**
   * 
   * @return number of column in list.
   */
  public int getColumnCount() {
    return columns.size();
  }
  
  /**
   * Returning Column from list that is in specific place.
   * @param index of list where should be column
   * @return column in specific index, or null if there is not column.
   */
  public Column getColumn(int index) {
    if (index >=0 && index < columns.size())
      return columns.get(index);
    else
      return null;
  }
  
  /**
   * Method for adding Column in list.
   * @param c Column for adding.
   */
  public void add(Column c) {
    columns.add(c);
  }
  
  /**
   * Removing index from list
   * @param c Column that has to be removed.
   */
  public void remove(Column c) {
    columns.remove(c);
  }
  
  /**
   * Iterator for this list.
   * @return iterator list.
   */
  public Iterator<Column> iterator() {
    return columns.iterator();
  }
  
  /**
   * Adding Columns from other ColumnList.
   * @param cl ColumnList from which columns should be added.
   */
  public void add(ColumnList cl){
      for(Column c: cl.columns){
          columns.add(c);
      }
  }
  
  /**
   * Method for adding new column in list. 
   * @param c Column that is already in list, and after this column should be added
   * new column.
   * @param newColumn new column that should be added in list.
   */
  public void addAfter(Column c, Column newColumn){
      if(columns.contains(c)){
          int index = columns.indexOf(c);
          index++;
          columns.add(index, newColumn);
      }
  }
  
  /**
   * Method for adding collection of ColumnMetaData to ColumnList, after Column
   * that is already there.
   * @param c column that is already in list and after this column should be added 
   * all Column from collection.
   * @param col collection from which we will add new columns.
   */
  public void addAfter(Column c, Collection<ColumnMetaData> col){
      if(columns.contains(c)){
          int index = columns.indexOf(c);
          index++;
          for(ColumnMetaData metaDate : col){
              columns.add(index, new Column(metaDate));
              index++;
          }
      }
  }
  
  /**
   * 
   * @return number of columns in list.
   */
  public int size(){
      return columns.size();
  }
  
  @Override
    public String toString() {
        return "ColumnList [columns=" + columns + ", sdf=" + sdf + "]";
    }



private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

  /*
  public static void main(String[] args) {
    Column c1 = new Column("DR_DRZAVA", "SCG");
    Column c2 = new Column("NM_PTTBR", new Integer(21000));
    Column c3 = new Column("DAT_DATUM", new Date());
    Column c4 = new Column("BIG_DEC", new BigDecimal(12.5f));
    ColumnList cl = new ColumnList();
    cl.add(c1);
    cl.add(c2);
    cl.add(c3);
    cl.add(c4);
    System.out.println(cl.getWhereClause());
  }*/
}