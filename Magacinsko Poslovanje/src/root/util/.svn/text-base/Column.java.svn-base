package root.util;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;

/**
 * This class represents a column-level extensions. Or in the
 * plain language this is object if compared with the object and class.
 * That is when an object on the basis of this class this is representing 
 * one row in column.
 */
public class Column extends ColumnMetaData {
    
    /**
     * Value of column.
     */
    private Object value;

    /**
     * Default constructor.
     */
    public Column() {
        super();
    }

    /**
     * Constructor
     * @param cmd data about row that is going to be made.
     */
    public Column(ColumnMetaData cmd){
        this.codeName = cmd.codeName;
        this.forigen_column_name = cmd.forigen_column_name;
        this.forigen_table_name = cmd.forigen_table_name;
        this.key = cmd.key;
        this.mandatory = cmd.mandatory;
        this.name = cmd.name;
        this.type = cmd.type;
        this.value = null;
        this.tableDbName = cmd.tableDbName;
        this.length = cmd.length;
        this.visble = cmd.visble;
        this.posibleValue = cmd.posibleValue;
        this.precision = cmd.precision;
        this.readOnly = cmd.readOnly;
        this.format = cmd.format;
        this.minValue = cmd.minValue;
        this.maxValue = cmd.maxValue;
        this.asName = cmd.asName;
        this.references = cmd.references;
        this.autoGenerated = cmd.autoGenerated;
    }

    /**
     * Constructor
     */
    public Column(String name, String type, Boolean key, Boolean mandatory,
            String forigenColumnName, String codeName, String forigenTableName,
            Object value, String tableDbName, Integer length,
            HashMap<String, String> posibleValue, Integer precision, Boolean visible,
            Boolean readOnly, String format, Object minValue, Object maxValue,
            String asName, HashSet<ReferencesMetaData> referenceName,
            Boolean autoGenerated) {
        super(name, type, key, mandatory, forigenColumnName, codeName,
                forigenTableName, tableDbName, length, posibleValue, precision,
                visible, readOnly, format, minValue, maxValue, asName, referenceName,
                autoGenerated);
        this.value = value;
    }
    
    /**
     * 
     * @return value of column
     */
    public Object getValue() {
        return value;
    }

    /**
     * Seting column value.
     * @param value to be set.
     */
    public void setValue(Object value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return "Column [value=" + value + "]";
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((value == null) ? 0 : value.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (!(obj instanceof Column))
            return false;
        Column other = (Column) obj;
        if (value == null) {
            if (other.value != null)
                return false;
        } else if (!value.equals(other.value))
            return false;
        return true;
    }

  }
