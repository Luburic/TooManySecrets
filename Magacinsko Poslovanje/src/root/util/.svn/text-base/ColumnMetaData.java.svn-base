package root.util;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Vector;
import java.util.Map.Entry;

/**
 * This class represents a column at the level of intension. Or in the
 * plain language this is class if you make compared with the object and class.
 *  That is when an object on the basis of this class it represents a column in a table.
 */
public class ColumnMetaData {
    
    /**
     * Name of column.
     */
    protected String name;
    //private Object value;
    /**
     * Type of column.
     */
    protected String type;
    /**
     * Is this column part of key.
     */
    protected Boolean key;
    /**
     * Is this column mandatory.
     */
    protected Boolean mandatory;
    /**
     * Foreign column name, if this column is from other table.
     */
    protected String forigen_column_name;
    /**
     * Name of table in database.
     */
    protected String codeName;
    /**
     * Foreign table name if this column is from other name.
     */
    protected String forigen_table_name;
    /**
     * Name of table in which is this column
     */
    protected String tableDbName;
    /**
     * Maximum length of content.
     */
    protected Integer length;
    /**
     * Precision of this column.
     */
    protected Integer precision;
    
    /**
     * This is a name of reference if column is marked as FK.
     */
    protected HashSet<ReferencesMetaData> references;
    /**
     * This only serves in case you have more of the same linked tables so you can
     * on this basis to change the name of the output columns from the database.
     * If the column is not referenced in the table with the label visible
     * This will certainly be null.
     */
    protected String asName;
    /**
     * Regex for validation.
     */
    protected String format;
    /**
     * Representing if this field should be visible in table that is connected 
     * with table in which is this column.
     */
    protected Boolean visble;
    /**
     * List of all possible value for this column.
     */
    protected HashMap<String, String> posibleValue;
    /**
     * This field is representing column that is used only for reading.
     * It will be used only for fields that are withdrawn from other tables
     * and are not PK.
     */
    protected Boolean readOnly;
    
    /**
     * Minimum value for this column.
     * Object type is type that is written in type field.
     */
    protected Object minValue;
    
    /**
     * Maximum value for this column.
     * Object type is type that is written in type field.
     */
    protected Object maxValue;
    
    /**
     * This mean that db will generate value of this field.
     */
    protected Boolean autoGenerated;

    /**
     * Constructor.
     */
    public ColumnMetaData() {
        name = null;
        //value = null;
        type = null;
        key = null;
        mandatory = null;
        forigen_column_name = null;
        tableDbName = null;
        length = null;
        posibleValue = new HashMap<String, String>();
        precision = null;
        visble = false;
        readOnly = false;
        format = null;
        minValue = null;
        maxValue = null;
        asName = null;
        references = new HashSet<ReferencesMetaData>();
        autoGenerated = false;
    }
    
    /**
     * Constructor.
     */
    public ColumnMetaData(String name, String type, Boolean key,
            Boolean mandatory, String forigenColumnName, String codeName,
            String forigenTableName, String tableDbName, Integer length, 
            HashMap<String, String> posibleValue, Integer precision,
            Boolean visible, Boolean readOnly, String format, Object minValue,
            Object maxValue, String asName, HashSet<ReferencesMetaData> referencedName,
            Boolean autoGenerated) {
        super();
        this.name = name;
        this.type = type;
        this.key = key;
        this.mandatory = mandatory;
        forigen_column_name = forigenColumnName;
        this.codeName = codeName;
        forigen_table_name = forigenTableName;
        this.tableDbName = tableDbName;
        this.length = length;
        this.posibleValue = posibleValue; 
        this.precision = precision;
        this.visble = visible;
        this.readOnly = readOnly;
        this.format = format;
        this.minValue = minValue;
        this.maxValue = maxValue;
        this.asName = asName;
        this.references = referencedName;
        this.autoGenerated = autoGenerated;
    }

    /**
     * Copy constructor
     */
    public ColumnMetaData(ColumnMetaData cmd){
        this.name = cmd.name;
        this.type = cmd.type;
        this.key = cmd.key;
        this.mandatory = cmd.mandatory;
        this.forigen_column_name = cmd.forigen_column_name;
        this.codeName = cmd.codeName;
        this.forigen_table_name = cmd.forigen_table_name;
        this.tableDbName = cmd.tableDbName;
        this.length = cmd.length;
        this.posibleValue = cmd.posibleValue; 
        this.precision = cmd.precision;
        this.visble = cmd.visble;
        this.readOnly = cmd.readOnly;
        this.format = cmd.format;
        this.minValue = cmd.minValue;
        this.maxValue = cmd.maxValue;
        this.asName = cmd.asName;
        this.references = cmd.references;
        this.autoGenerated = cmd.autoGenerated;
    }
    
    /**
     * 
     * @return name of column.
     */
    public String getName() {
      return name;
    }
    /**
     * 
     * @param name new name of column
     */
    public void setName(String name) {
            this.name = name;
    }
   
    /**
     * 
     * @return type of this column
     */
    public String getType() {
        return type;
    }
    /**
     * 
     * @param type new type of this column
     */
    public void setType(String type) {
            this.type = type;
    }
    
    /**
     * 
     * @return if this column is part of key in table.
     */
    public boolean isKey() {
        return key;
    }
    /**
     * 
     * @param key new value for key.
     */
    public void setKey(boolean key) {
            this.key = key;
    }
    /**
     * 
     * @return is this mandatory field.
     */
    public boolean isMandatory() {
        return mandatory;
    }
    /**
     * 
     * @param mandatory new value for mandatory.
     */
    public void setMandatory(boolean mandatory) {
            this.mandatory = mandatory;
    }
    /**
     * 
     * @return foreign column name of this column if it is FK.
     */
    public String getForigen_column_name() {
        return forigen_column_name;
    }
    /**
     * 
     * @param forigenColumnName foreign column name for column that is FK.
     */
    public void setForigen_column_name(String forigenColumnName) {
            forigen_column_name = forigenColumnName;
    }
    
    /**
     * 
     * @return foreign table name of this column if it is FK. Should not be used,
     * it is not accurate enough. 
     */
    public String getForigen_table_name() {
        return forigen_table_name;
    }

    /**
     * 
     * @param forigenTableName new foreign column table name for this column.
     */
    public void setForigen_table_name(String forigenTableName) {
        forigen_table_name = forigenTableName;
    }
    
    /**
     * 
     * @return return name of this column in DB.
     */
    public String getCodeName() {
        return codeName;
    }
    
    /**
     * 
     * @param codeName new name of this column that is used in DB.
     */
    public void setCodeName(String codeName) {
        this.codeName = codeName;
    }

    /**
     * 
     * @return name of table in which is this column.
     */
    public String getTableDbName() {
        return tableDbName;
    }

    /**
     * 
     * @param tableDbName new table name for this column.
     */
    public void setTableDbName(String tableDbName) {
        this.tableDbName = tableDbName;
    }
    
    /**
     * 
     * @return maximum length of data in this column.
     */
    public Integer getLength() {
        return length;
    }

    
    /**
     * 
     * @param length new maximum length of data in this column.
     */
    public void setLength(Integer length) {
        this.length = length;
    }
    
    /**
     * Adding new possible value for value in this column.
     * @param key value that is stored in DB
     * @param value human readable string
     */
    public void addPosibleValue(String key, String value){
        if(!posibleValue.containsKey(key)){
            posibleValue.put(key, value);
        }
    }
    
    /**
     * 
     * @param key value that can be stored in DB for this column
     * @return for entered value from DB it return human readable string
     */
    public String getPosibleValue(String key){
        return posibleValue.get(key);
    }
    
    /**
     * Method return all possible value of key for this column
     * @return collection of keys
     */
    public Collection<String> getKeysOfPosibleValues(){
        return posibleValue.keySet();
    }
    
    /**
     * Method return all possible human readable value for this column.
     * @return collection of human readable value.
     */
    @SuppressWarnings({ "unchecked" })
    public Collection<String> getValuesOfPosibleValues(){
        Vector<Entry<String, String>> v = new Vector<Entry<String, String>>(posibleValue.entrySet());
        Collections.sort(v,new Comparator<Entry<String, String>>(){
            
            @Override
            public int compare(Entry<String, String> l1, Entry<String, String> l2) {
                
                return l1.getKey().compareToIgnoreCase(l2.getKey());
            }  
            
        });
        Vector<String> temp = new Vector<String>();
        for(Entry<String, String> e : v){
            temp.add(e.getValue());
        }
        return temp;
    }
     
    /**
     * 
     * @return map of all possible value for this column.
     */
    public HashMap<String, String> getPosibleValue() {
        return posibleValue;
    }


    /**
     * 
     * @return precision for this column.
     */
    public Integer getPrecision() {
        return precision;
    }


    /**
     * 
     * @param precision new precision for this column.
     */
    public void setPrecision(Integer precision) {
        this.precision = precision;
    }

    /**
     * 
     * @return if this column is visible in table that is referecing 
     * table in which this column is.
     */
    public Boolean getVisble() {
        return visble;
    }

    /**
     * 
     * @param visble new visible mark for this column.
     */
    public void setVisble(Boolean visble) {
        this.visble = visble;
    }
    
    
    /**
     * 
     * @return if this column is marked for readonly. It is used for
     * fields that are loaded from other table and are not part of FK. And they are
     * being drown in this referencing table.
     */
    public Boolean getReadOnly() {
        return readOnly;
    }

    /**
     * 
     * @param readOnly new mark for read only.
     */
    public void setReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
    }
    
    /**
     * 
     * @return true if column is FK, else false.
     */
    public Boolean isFK(){    	
        if((forigen_table_name != null && !forigen_table_name.equals("")) &&
                (forigen_column_name != null && !forigen_column_name.equals(""))){
            return true;
        }
        
        return false;
    }

    /**
     * 
     * @return regex for this column.
     */
    public String getFormat() {
        return format;
    }

    /**
     * 
     * @param format new regex for this column.
     */
    public void setFormat(String format) {
        this.format = format;
    }

    /**
     * 
     * @return minimum value for this column.
     */
    public Object getMinValue() {
        return minValue;
    }

    /**
     * 
     * @param minValue new minimum value for this column.
     */
    public void setMinValue(Object minValue) {
        
        this.minValue = minValue;
    }
    
    /**
     * Setting minValue from string.
     * @param minValue minValue string that is geted from mosquito.
     */
    public void setMinValue(String minValue) {
        if(minValue == null)
            return;
        try{
            if(type.equals("java.lang.Boolean")){
                this.minValue = Boolean.parseBoolean(minValue.equals("1")? "true" : "false");
            }else if(type.equals("java.lang.String")){
                this.minValue = minValue;
            }else if(type.equals("java.math.BigDecimal")){
                this.minValue = new BigDecimal(minValue);
            }else if(type.equals("java.sql.Date")){
                String [] array = minValue.split("-");
                if(array.length < 3){
                    this.minValue = null;
                    return;
                }
                if(array.length == 3){
                    this.minValue = new Date((new GregorianCalendar(Integer.parseInt(array[2]), 
                        Integer.parseInt(array[1]) - 1, Integer.parseInt(array[0]))).getTimeInMillis());
                }else if(array.length == 5){
                    this.minValue = new Date((new GregorianCalendar(Integer.parseInt(array[2]), 
                        Integer.parseInt(array[1]) - 1, Integer.parseInt(array[0]), 
                        Integer.parseInt(array[3]), Integer.parseInt(array[4]))).getTimeInMillis());
                }else if(array.length == 6){
                    this.minValue = new Date((new GregorianCalendar(Integer.parseInt(array[2]), 
                            Integer.parseInt(array[1]) - 1, Integer.parseInt(array[0]), 
                            Integer.parseInt(array[3]), Integer.parseInt(array[4]),
                            Integer.parseInt(array[5]))).getTimeInMillis());
                }else 
                    return;
            }else{
                return;
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 
     * @return maximum value for this column.
     */
    public Object getMaxValue() {
        return maxValue;
    }

    /**
     * 
     * @param maxValue new maximum value for this column.
     */
    public void setMaxValue(Object maxValue) {
        this.maxValue = maxValue;
    }
    
    /**
     * Setting maxValue from string.
     * @param maxValue string that is geted from mosquito.
     */
    public void setMaxValue(String maxValue) {
        if(maxValue == null)
            return;
        try{
            if(type.equals("java.lang.Boolean")){
                this.maxValue = Boolean.parseBoolean(maxValue.equals("1")? "true" : "false");
            }else if(type.equals("java.lang.String")){
                this.maxValue = maxValue;
            }else if(type.equals("java.math.BigDecimal")){
                this.maxValue = new BigDecimal(maxValue);
            }else if(type.equals("java.sql.Date")){
                String [] array = maxValue.split("-");
                if(array.length < 3){
                    this.maxValue = null;
                    return;
                }
                if(array.length == 3){
                    this.maxValue = new Date((new GregorianCalendar(Integer.parseInt(array[2]), 
                        Integer.parseInt(array[1]) - 1, Integer.parseInt(array[0]))).getTimeInMillis());
                }else if(array.length == 5){
                    this.maxValue = new Date((new GregorianCalendar(Integer.parseInt(array[2]), 
                        Integer.parseInt(array[1]) - 1, Integer.parseInt(array[0]), 
                        Integer.parseInt(array[3]), Integer.parseInt(array[4]))).getTimeInMillis());
                }else if(array.length == 6){
                    this.maxValue = new Date( (new GregorianCalendar(Integer.parseInt(array[2]), 
                            Integer.parseInt(array[1]) - 1, Integer.parseInt(array[0]), 
                            Integer.parseInt(array[3]), Integer.parseInt(array[4]),
                            Integer.parseInt(array[5]))).getTimeInMillis());
                }else 
                    return;
            }else{
                return;
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * 
     * @return return asName for this string. AsName is formed, reference name + code name
     * of column. It should be used in query for db.
     */
    public String getAsName() {
        return asName;
    }

    /**
     * 
     * @param asName new asname for this column.
     */
    public void setAsName(String asName) {
        this.asName = asName;
    }

    /**
     * 
     * @return collection of references in which this column is used.
     */
    public Collection<ReferencesMetaData> getReferences() {
        return references;
    }

    /**
     * 
     * @param references in which this column is used.
     */
    public void setReferences(HashSet<ReferencesMetaData> references) {
        this.references = references;
    }
    /**
     * Adding new reference in this column.
     * @param rmd reference in which this column is used.
     */
    public void addReferece(ReferencesMetaData rmd){
        references.add(rmd);
    }
    /**
     * Method is used to found how many tables is between her and column that is her 
     * parent.
     * @param table parent table in which we should start search.
     * @return 0 if this column is not FK, else number greater than 0.
     */
    public int getHopsToParrent(TableMetaData table){
        if(!this.isFK()){
            return 0;
        }

        
        ColumnMetaData current = table.getColumnByDbName(this.getForigen_column_name());
        
        if(current == null){
            return 1;
        }
        
        int counter = 0;
        
        while(current.isFK()){
            current = current.getParentColumn();
            
            if(current == null)
                return counter;
            counter++;
        }
        return counter;
        
        
    }

    /**
     * 
     * @return parent column for this table. One of possible many of them.
     */
    public ColumnMetaData getParentColumn(){
        if(!this.isFK())
            return null;
        MetaDataLoader loader = MetaDataLoader.getInstace();
        
        TableMetaData tmd = loader.getTable(this.getForigen_table_name());
        
        ColumnMetaData cmd = tmd.getColumnByDbName(this.forigen_column_name);
        return cmd;
    }
    /**
     * 
     * @param tableName name of parent table.
     * @return parent column for this column.
     */
    public ColumnMetaData getParentColumn(String tableName){
        if(!this.isFK())
            return null;
        MetaDataLoader loader = MetaDataLoader.getInstace();
        
        TableMetaData tmd = loader.getTable(tableName);
        
        ColumnMetaData cmd = tmd.getColumnByDbName(this.forigen_column_name);
        return cmd;
    }



    


    

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((asName == null) ? 0 : asName.hashCode());
        result = prime * result
                + ((autoGenerated == null) ? 0 : autoGenerated.hashCode());
        result = prime * result
                + ((codeName == null) ? 0 : codeName.hashCode());
        result = prime
                * result
                + ((forigen_column_name == null) ? 0 : forigen_column_name
                        .hashCode());
        result = prime
                * result
                + ((forigen_table_name == null) ? 0 : forigen_table_name
                        .hashCode());
        result = prime * result + ((key == null) ? 0 : key.hashCode());
        result = prime * result + ((length == null) ? 0 : length.hashCode());
        result = prime * result
                + ((mandatory == null) ? 0 : mandatory.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result
                + ((readOnly == null) ? 0 : readOnly.hashCode());
        result = prime * result
                + ((tableDbName == null) ? 0 : tableDbName.hashCode());
        result = prime * result + ((type == null) ? 0 : type.hashCode());
        result = prime * result + ((visble == null) ? 0 : visble.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof ColumnMetaData))
            return false;
        ColumnMetaData other = (ColumnMetaData) obj;
        if (asName == null) {
            if (other.asName != null)
                return false;
        } else if (!asName.equals(other.asName))
            return false;
        if (autoGenerated == null) {
            if (other.autoGenerated != null)
                return false;
        } else if (!autoGenerated.equals(other.autoGenerated))
            return false;
        if (codeName == null) {
            if (other.codeName != null)
                return false;
        } else if (!codeName.equals(other.codeName))
            return false;
        if (forigen_column_name == null) {
            if (other.forigen_column_name != null)
                return false;
        } else if (!forigen_column_name.equals(other.forigen_column_name))
            return false;
        if (forigen_table_name == null) {
            if (other.forigen_table_name != null)
                return false;
        } else if (!forigen_table_name.equals(other.forigen_table_name))
            return false;
        if (key == null) {
            if (other.key != null)
                return false;
        } else if (!key.equals(other.key))
            return false;
        if (length == null) {
            if (other.length != null)
                return false;
        } else if (!length.equals(other.length))
            return false;
        if (mandatory == null) {
            if (other.mandatory != null)
                return false;
        } else if (!mandatory.equals(other.mandatory))
            return false;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (readOnly == null) {
            if (other.readOnly != null)
                return false;
        } else if (!readOnly.equals(other.readOnly))
            return false;
        if (tableDbName == null) {
            if (other.tableDbName != null)
                return false;
        } else if (!tableDbName.equals(other.tableDbName))
            return false;
        if (type == null) {
            if (other.type != null)
                return false;
        } else if (!type.equals(other.type))
            return false;
        if (visble == null) {
            if (other.visble != null)
                return false;
        } else if (!visble.equals(other.visble))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "ColumnMetaData [asName=" + asName + ", codeName=" + codeName
                + ", forigen_column_name=" + forigen_column_name
                + ", forigen_table_name=" + forigen_table_name + ", format="
                + format + ", key=" + key + ", length=" + length
                + ", mandatory=" + mandatory + ", maxValue=" + maxValue
                + ", minValue=" + minValue + ", name=" + name + ", precision="
                + precision + ", readOnly=" + readOnly + ", tableDbName="
                + tableDbName + ", type=" + type + ", visble=" + visble + "]";
    }

    /**
     * 
     * @return auto generated mark for this column.
     */
    public Boolean getAutoGenerated() {
        return autoGenerated;
    }

    /**
     * 
     * @param autoGenerated new auto generated mark for this field.
     */
    public void setAutoGenerated(Boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
    }
    
    
    

    

}
