package root.util;

import java.util.Collection;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import rs.mgifos.mosquito.IMetaLoader;
import rs.mgifos.mosquito.impl.pdm.JClassResolver;
import rs.mgifos.mosquito.impl.pdm.PDMType;
import rs.mgifos.mosquito.impl.pdm.PDMetaLoader;
import rs.mgifos.mosquito.model.MetaColumn;
import rs.mgifos.mosquito.model.MetaModel;
import rs.mgifos.mosquito.model.MetaReference;
import rs.mgifos.mosquito.model.MetaTable;
/**
 * This class is singleton that is used for storing table metadata,
 * and for loading metadata from PDM files.
 *
 */
public class MetaDataLoader {

    private static MetaDataLoader instance;
    /**
     * All tables that are used in system.
     */
    private Map<String, TableMetaData> tables;
    /**
     * Set of all java classes that are used in columns.
     */
    private Collection<String> types;
    
    /**
     * Constructor.
     */
    private MetaDataLoader(){
        tables = new Hashtable<String, TableMetaData>();
        types = new HashSet<String>();
    }
    
    /**
     * 
     * @return method for getting instance of this class.
     */
    public static synchronized MetaDataLoader getInstace(){
        if(instance == null){
            instance = new MetaDataLoader();
            instance.load();
        }
        
        return instance;
    }
    /**
     * Method for loading content from PDM files.
     */
    private synchronized void load(){
        try{
            IMetaLoader metaLoader = new PDMetaLoader();
            Collection<PDMType> tps = JClassResolver.getInstance().getValues();
            
            for(PDMType pd : tps){
                types.add(pd.getDefaultJClass());
            }
            
            Properties properties = new Properties();
            
            properties.put(PDMetaLoader.FILENAME, root.util.Constants.getModelLoc());//"model/Firma.pdm"
            
            MetaModel model = metaLoader.getMetaModel(properties);
            
            for(MetaTable table : model){
//                ((MetaReference)table.eRefs().nextElement()).
                TableMetaData tmd = new TableMetaData();
                tmd.setDbName(table.getCode());
                tmd.setRealName(table.getName());
                tmd.setMenu(table.getMeni());
                tmd.setReadOnly(table.getReadOnly());
                
                Collection<MetaColumn> columns = table.cColumns();
                
                for(MetaColumn mc : columns){
                    ColumnMetaData cmd = new ColumnMetaData();
                    cmd.setName(mc.getName());
                    cmd.setMandatory(mc.isMandatory());
                    cmd.setForigen_column_name(mc.getFkColParent() == null ? null : mc.getFkColParent().getCode());
                    cmd.setForigen_table_name(mc.getFkColParent() == null ? null : mc.getFkColParent().getParentTable());
                    cmd.setType(mc.getJClassName());
                    cmd.setKey(mc.isPartOfPK());
                    cmd.setCodeName(mc.getCode());
                    cmd.setTableDbName(table.getCode());
                    cmd.setLength(mc.getLength() == 0 ? 15 : mc.getLength());
                    cmd.setPrecision(mc.getPrecision());
                    cmd.setFormat(!mc.getFormat().equals("")? mc.getFormat() : null);
                    cmd.setMinValue(mc.getMinValue());
                    cmd.setMaxValue(mc.getMaxValue());
                    cmd.setAutoGenerated(mc.getReadOnly());

                    Set<Entry<String, String>> enumeration = mc.entrySet_Value_Label();
                    
                    if(enumeration.size() > 0){
                        cmd.addPosibleValue("", "");
                    }
                    
                    for(Entry<String, String> value : enumeration){                        
                        cmd.addPosibleValue(value.getKey(), value.getValue());
                    }
                    
                    
                    
                    //parsing comments
                    String comment = null;
                    if((comment = mc.getComment()) != null && !comment.equals("")){
                        if(comment.contains("@visible")){
                            cmd.setVisble(true);
                        }else{
                            cmd.setVisble(false);
                        }
                    }
                    
                    tmd.getColumns().add(cmd);
                }
                
                Enumeration<MetaReference> refs = (Enumeration<MetaReference>)table.eRefs();
                
                while(refs.hasMoreElements()){
                    MetaReference mr = refs.nextElement();
                    ReferencesMetaData rmd = new ReferencesMetaData();
                    rmd.setParentTable(mr.getParentTable().getCode());
                    rmd.setSourceTable(mr.getSourceTable().getCode());
                    rmd.setName(mr.getCode());
                    rmd.setHumanReadableName(mr.getName());
                    rmd.setForNext(mr.getForNext());
                    
                    Enumeration<MetaColumn> eCol = mr.getVectorColumn().elements();
                    
                    while (eCol.hasMoreElements()) {
                        MetaColumn metaColumn = (MetaColumn) eCol.nextElement();
                        ColumnMetaData col =
                            tmd.getColumnByDbName(metaColumn.getCode());
                        col.addReferece(rmd);
                        if(col != null){
                            rmd.add(col);
                        }else{
                            System.out.println("Nesto je krenulo po zlu trazenju kolone " + metaColumn.getCode());
                        }
                        tmd.getEntities().add(rmd);
                    }
                    
                    
                }
                
                this.tables.put(tmd.getDbName(), tmd);
            }
            
            for(TableMetaData tm : tables.values()){
                for(ReferencesMetaData rd : tm.getEntities()){
                    rd.loadReadOnlyFields();
                    rd.loadMandatory();
                }
            }
            
            //pripramema podatke za next mehanizam.
            for(TableMetaData temp : tables.values()){
                for(TableMetaData referenced : tables.values()){
                    if(!temp.equals(referenced)){
                        Collection<ReferencesMetaData> refs = referenced.getEntities();
                        
                        for(ReferencesMetaData ref : refs ){
                            if(ref.getParentTable().equals(temp.getDbName())){
                                temp.getForNext().add(referenced);
                            }
                        }
                    }
                }
            }
            System.out.println("1");
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * 
     * @return collection of tables.
     */
    public Collection<TableMetaData> getValues(){
        return tables.values();
    }
    /**
     * 
     * @return collection of all table names, but names are from db.
     */
    public Collection<String> getKeys(){
        return tables.keySet();
    }
    /**
     * For given key it return table that is associated with key.
     * @param key for search
     * @return associated table for given key.
     */
    public TableMetaData getTable(String key){
        return tables.get(key);
    }
    
    /**
     * 
     * @return name of all types used in PDM files.
     */
    public Collection<String> getAllJTypes(){
        return types;
    }
    
    
    public static void main(String [] args){
        /*
        Pattern p = Pattern.compile("\\p{Digit}{1,15}(\\.|,)?\\p{Digit}{0,2}");
        Matcher m = p.matcher("123");
        boolean b = m.matches();
        
        System.out.println(b);*/
        
        try{
            MetaDataLoader loader = MetaDataLoader.getInstace();
            
            for(TableMetaData tm : loader.tables.values()){
                for(ColumnMetaData cmd : tm.getColumns()){
                    if(cmd.getFormat() != null){
                        System.out.println(cmd.getFormat());
                        Pattern p = Pattern.compile(cmd.getFormat());
                        Matcher m = p.matcher("aaa");
                        boolean b = m.matches();
                        System.out.println(b);
                    }
                }
            }
            
            TableMetaData tmd = loader.getTable("RACUNI_PRAVNIH_LICA");
            for(ReferencesMetaData rmd : tmd.getEntities()){
                for(ColumnMetaData cmd :rmd.getAllColumn()){
                    for(ReferencesMetaData rm : cmd.getReferences()){
                        String sm = rm.getName();
                        System.out.println(sm);
                    }
                    
                }
            }
            Collection<Object> res = tmd.getFields();
            
            
            TableMetaData tmd1 = loader.getTable("KURS_U_VALUTI");
            Collection<ColumnMetaData> res1 = null;
            for(ReferencesMetaData rmd : tmd1.getEntities()){
                
                res1 = rmd.getZoomableColumns();
                
            }
            
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * 
     * @return all names of menus in model.
     */
    public Collection<String> getMenus(){
        Collection<String> res = new HashSet<String>();
        
        for(TableMetaData tmd : tables.values()){
            res.add(tmd.getMenu());
        }
        
        return res;
    }
    
    /**
     * Find all tables that have give menu name
     * @param menuName menu name
     * @return set of tables.
     */
    public Collection<TableMetaData> getTablesWithMenu(String menuName){
        Collection<TableMetaData> res = new HashSet<TableMetaData>();
        
        for(TableMetaData tmd : tables.values()){
            if(tmd.getMenu().equals(menuName)){
                res.add(tmd);
            }
        }
        
        return res;
        
    }
    
    /**
     * 
     * @return all tables that are not having table name.
     */
    public Collection<TableMetaData> getTablesWithDefaultMenu(){
        return getTablesWithMenu("");
    }
    
}
