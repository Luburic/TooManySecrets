package root.util;

import java.awt.Event;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.math.BigDecimal;
import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;

import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;

import com.toedter.calendar.JDateChooser;

@SuppressWarnings("serial")
public class Field extends JComponent{
	private JLabel fieldLabel;
	private JComponent fieldElement;
	private String fieldDbName;
	private String fieldDisplayName;
	private String fieldType;
	private boolean isZoomField;
	private ErrorProvider errorProvider;
	private JComponent field;
	private ColumnMetaData validationData;
	private boolean key;
	private boolean mandatory;
	private boolean autogenerated;
	
	public Field() {
		super();
		
		errorProvider = new ErrorProvider();
	}
	
	public String getFieldDbName() {
		return fieldDbName;
	}
	public void setFieldDbName(String fieldDbName) {
		this.fieldDbName = fieldDbName;
	}
	public String getFieldDisplayName() {
		return fieldDisplayName;
	}
	public void setFieldDisplayName(String fieldDisplayName) {
		this.fieldDisplayName = fieldDisplayName;
	}
	public void setAutogenerated(boolean isAutogenerated) {
		this.autogenerated = isAutogenerated;
	}
	public boolean isAutogenerated() {
		return this.autogenerated;
	}
	public boolean isZoomField() {
		return isZoomField;
	}
	public void setZoomField(boolean isZoomField) {
		this.isZoomField = isZoomField;
	}
	public String getFieldType() {
		return fieldType;
	}
	public void setFieldType(String fieldType) {
		this.fieldType = fieldType;
	}
	public JLabel getFieldLabel() {
		return fieldLabel;
	}
	public void setFieldLabel(JLabel fieldLabel) {
		this.fieldLabel = fieldLabel;
	}
	public JComponent getFieldElement() {
			return fieldElement;
	}
	public void setFieldElement(JComponent fieldElement) {
		this.fieldElement = fieldElement;
	}
	public void setMandatory(boolean isMandatory) {
		this.mandatory = isMandatory;
	}
	public boolean isMandatory() {
		return this.mandatory;
	}
	public void setKey(Boolean key) {
		this.key = key;
	}
	
	public Boolean isKey() {
		return key;
	}
	
	public void setData(Object data){
		if(fieldElement instanceof VarcharField){
			if(data != null)
				((VarcharField)fieldElement).setText(data.toString());
			else
				((VarcharField)fieldElement).setText("");
		}else if(fieldElement instanceof JCheckBox){
			if(data.toString().equals("Da"))
				((JCheckBox)fieldElement).setSelected(true);
			else
				((JCheckBox)fieldElement).setSelected(false);
		}else if(fieldElement instanceof JDateChooser){
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
  		  	java.util.Date utilValue;
			try {
				utilValue = (java.util.Date)formatter.parse(data.toString());
				java.sql.Date value = new java.sql.Date(utilValue.getTime());
				((JDateChooser)fieldElement).setDate(value);
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
		}else if(fieldElement instanceof NumericField){
			if(data != null)
				((NumericField)fieldElement).setText(data.toString());
			else
				((NumericField)fieldElement).setText("");
		}else if(fieldElement instanceof JComboBox){	
			if(data != null)
				((JComboBox)fieldElement).setSelectedItem(validationData.getPosibleValue().get(data.toString()));
			else
				((JComboBox)fieldElement).setSelectedIndex(0);
		}
	}
	
	public Object getData(){
		Object retVal = null;
		if(fieldType.equals(Constants.DB_BOOLEAN)){
			retVal = ((JCheckBox)fieldElement).isSelected();
		}else if(fieldType.equals(Constants.DB_DATE)){
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			retVal = formatter.format(((JDateChooser)fieldElement).getDate());

		}else if(fieldType.equals(Constants.DB_DECIMAL_BIG)){
			retVal = new BigDecimal(((NumericField)fieldElement).getText());
		}else if(fieldType.equals(Constants.DB_INTEGER_BIG)){
			retVal = new Integer(((NumericField)fieldElement).getText());
		}else if(fieldType.equals(Constants.DB_VARCHAR)){
			if(fieldElement instanceof VarcharField){
				retVal = ((VarcharField)fieldElement).getText();
			}else{
				retVal = ((JComboBox)fieldElement).getSelectedItem().toString();
			}
		}
		return retVal;
	}
	
	public ErrorProvider getErrorProvider() {
		return errorProvider;
	}
	public void setErrorProvider(ErrorProvider errorProvider) {
		this.errorProvider = errorProvider;
	}
	
	public void setValidationData(ColumnMetaData columnData) {
		this.validationData = columnData;
		
		if (isZoomField) {
			field = ((ZoomElement) fieldElement).getElement();
		} else {
			field = fieldElement;
		}
		
		field.addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent arg0) {
				errorProvider.hideError();				
			}

			@Override
			public void focusLost(FocusEvent arg0) {
				validateField();	
			}
			
		});
	}
	
	
	
	
	public boolean validateField() {
		if (Constants.MODE == Constants.MODE_SEARCH) {
			return true;
		}
		if (fieldType.equals("zoom type")) {
			boolean result = ((ZoomElement)fieldElement).validateEntry(); 

			if (result) {
				errorProvider.hideError();
			} else {
				errorProvider.showError(Constants.VALIDATION_ZOOM_FIELD);
			}

			return result; 

		} else {
			if (field instanceof JDateChooser)	{
				if (((JDateChooser)field).getDate() != null) {
					Date validating = new Date(((JDateChooser)field).getDate().getTime());// (Date) ;

					Date min = (Date) validationData.getMinValue();//TODO string format
					Date max = (Date) validationData.getMaxValue();
					if (min != null && max != null) {
						if (validating.after(max) || validating.before(min)) {
							errorProvider.showError(Constants.VALIDATION_DATE_OUT_OF_RANGE+min.toString() + " do "+max.toString());
							return false;
						} else {
							errorProvider.hideError();
							return true;
						}
					}
				} else if (validationData.isMandatory()) {
					errorProvider.showError(Constants.VALIDATION_MANDATORY_FIELD);
					return false;
				}

			} else if (field instanceof NumericField) {

				String validating = ((NumericField)field).getText().trim();

				if (validating.length() == 0) {
					if (validationData.isMandatory()) {
						errorProvider.showError(Constants.VALIDATION_MANDATORY_FIELD);
						return false;
					}  
				} else {
					BigDecimal min = ((BigDecimal)validationData.getMinValue());
					BigDecimal max = ((BigDecimal)validationData.getMaxValue());
					if ( (min != null && BigDecimal.valueOf(Double.parseDouble(validating)).compareTo(min) < 0) || 
							(max != null && BigDecimal.valueOf(Double.parseDouble(validating)).compareTo(max) > 0) ){

						errorProvider.showError(Constants.VALIDATION_OUT_OF_RANGE+min.doubleValue()+"-"+max.doubleValue());
						return false;
					}
					errorProvider.hideError();
					return true;
				}

			} else if (field instanceof JComboBox) {

				String validating = ((JComboBox)field).getSelectedItem().toString();

				if (validating.length() == 0) {
					if (validationData.isMandatory()) {
						errorProvider.showError(Constants.VALIDATION_MANDATORY_FIELD);
						return false;
					}  
				} else {
					errorProvider.hideError();
				}

			} else if (field instanceof VarcharField) {

				String validating;
				if (field.getClass().getName().equals(Constants.J_COMBO_BOX)) {
					validating = ((JComboBox)field).getSelectedItem().toString();
					if (validating.length() == 0 && validationData.isMandatory()==true) {
						errorProvider.showError(Constants.VALIDATION_COMBOBOX_FIELD);
						return false;
					}
					return true;
				}else if(field instanceof VarcharField){
				    validating = ((VarcharField)field).getText().trim();
				}else if(field instanceof NumericField){
				    validating = ((NumericField)field).getText().trim();
				}else {
					validating = ((JTextField)field).getText().trim();
				}

				if (validating.length() == 0) {
					if (validationData.isMandatory()) {
						errorProvider.showError(Constants.VALIDATION_MANDATORY_FIELD);
						return false;
					} 
				} else if (!(Pattern.matches(validationData.getFormat(), validating))) {//regex check
					errorProvider.showError(Constants.VALIDATION_REGEX);
					return false;
				}
			} 
		}
		return true;
	}
}
